---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
export const prerender = true;
import { AstroSeo } from '@astrolib/seo';
import { getCollection } from 'astro:content';
export async function getStaticPaths({ paginate }) {
  let blogEntries = await getCollection('blogs');
  blogEntries = Array.from({ length: 100 }, () => [...blogEntries]).flat();
  // Generate pages from our array of astronauts, with 2 to a page
  return paginate(blogEntries, { pageSize: 18 });
}

const colors = ['blue', 'purple', 'pink', 'red', 'orange'];
// All paginated data is passed on the "page" prop
const { page } = Astro.props;
---

<AstroSeo
  title={`Blog - ${page.currentPage} of ${page.lastPage}`}
  description="Sharing my thoughts and ideas about web development, design, and more."
  canonical="https://www.tbd.com"
  openGraph={{
    url: 'https://www.tbd.com',
    title: 'Open Graph Title',
    description: 'Open Graph Description',
    images: [
      {
        url: 'https://www.tbd.com/opengraph/social-og.jpg',
        width: 1200,
        height: 630,
        alt: 'Social open graph',
        type: 'image/jpeg',
      },
      {
        url: 'https://www.tbd.com/opengraph/twitter-og.jpg',
        width: 4096,
        height: 4096,
        alt: 'Twitter open graph',
        type: 'image/jpeg',
      },
      { url: 'https://www.tbd.com/opengraph/social-og.jpg' },
      { url: 'https://www.tbd.com/opengraph/twitter-og.jpg' },
    ],
    site_name: 'YourSitesName',
  }}
  twitter={{
    handle: '@meh',
    site: '@meh',
    cardType: 'summary_large_image',
  }}
/>
<!--Display the current page number. Astro.params.page can also be used!-->
<Layout title="blog">
  <Navigation />
  <div
    class="mt-20 min-h-screen bg-gradient-to-r from-gray-900 to-black h-full">
    <div
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 px-4 lg:px-8 xl:px-12 pt-8">
      {
        page.data.map((entry) => {
          // const fromColor = colors[Math.floor(Math.random() * colors.length)];
          // const toColor = colors[Math.floor(Math.random() * colors.length)];
          const randomIndex = () => Math.floor(Math.random() * colors.length);
          let fromColorIndex, toColorIndex, viaColorIndex;
          do {
            fromColorIndex = randomIndex();
            toColorIndex = randomIndex();
            viaColorIndex = randomIndex();
          } while (
            fromColorIndex === toColorIndex ||
            fromColorIndex === viaColorIndex ||
            toColorIndex === viaColorIndex
          );

          const fromColor = colors[fromColorIndex];
          const toColor = colors[toColorIndex];
          const viaColor = colors[viaColorIndex];
          const gradientClasses = `bg-gradient-to-r from-${fromColor} via-${viaColor} to-${toColor}`;
          return (
            <div
              class={`shadow-lg rounded-lg overflow-hidden animate__animated animate__zoomIn animate__faster ${gradientClasses}`}>
              <div class="p-6">
                <h2 class="text-lg sm:text-xl md:text-2xl font-semibold text-white uppercase tracking-wide mb-1">
                  {entry.data.title}{' '}
                  <time datetime={entry.data.publishedAt.toISOString()}>
                    {entry.data.publishedAt.toDateString()}
                  </time>
                </h2>
                <div class="mt-4">
                  <a
                    href={`/posts/${entry.slug}`}
                    class="text-white text-sm hover:text-gray-300 font-semibold">
                    Read More â†’
                  </a>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
    <div class="flex justify-center items-center mt-8">
      <div class="flex flex-col md:flex-row">
        <div class="w-full md:w-auto mb-2 md:mb-0 md:mr-4">
          <span class="text-white text-lg sm:text-xl md:text-2xl">
            Page {page.currentPage} of {page.lastPage}
          </span>
        </div>
        <!-- Previous Link -->
        {
          page.url.prev ? (
            <a
              href={page.url.prev}
              class="text-orange font-medium mr-4 text-lg sm:text-xl md:text-2xl">
              Previous
            </a>
          ) : null
        }
        <!-- Next Link -->
        {
          page.url.next ? (
            <a
              href={page.url.next}
              class="text-orange font-medium text-lg sm:text-xl md:text-2xl">
              Next
            </a>
          ) : null
        }
      </div>
    </div>
  </div>
</Layout>
