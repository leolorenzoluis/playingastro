---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
export const prerender = true;
import { getCollection } from 'astro:content';
export async function getStaticPaths({ paginate }) {
  let blogEntries = await getCollection('blogs');
  blogEntries = Array.from({ length: 100 }, () => [...blogEntries]).flat();
  // Generate pages from our array of astronauts, with 2 to a page
  return paginate(blogEntries, { pageSize: 18 });
}

const colors = ['blue', 'purple', 'pink', 'red', 'orange'];
// All paginated data is passed on the "page" prop
const { page } = Astro.props;
---

<!--Display the current page number. Astro.params.page can also be used!-->
<Layout title="blog">
  <Navigation />
  <div
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 px-4 lg:px-8 xl:px-12">
    {
      page.data.map((entry) => {
        // const fromColor = colors[Math.floor(Math.random() * colors.length)];
        // const toColor = colors[Math.floor(Math.random() * colors.length)];
        const randomIndex = () => Math.floor(Math.random() * colors.length);
        let fromColorIndex, toColorIndex, viaColorIndex;
        do {
          fromColorIndex = randomIndex();
          toColorIndex = randomIndex();
          viaColorIndex = randomIndex();
        } while (
          fromColorIndex === toColorIndex ||
          fromColorIndex === viaColorIndex ||
          toColorIndex === viaColorIndex
        );

        const fromColor = colors[fromColorIndex];
        const toColor = colors[toColorIndex];
        const viaColor = colors[viaColorIndex];
        const gradientClasses = `bg-gradient-to-r from-${fromColor} via-${viaColor} to-${toColor}`;
        return (
          <div
            class={`shadow-lg rounded-lg overflow-hidden ${gradientClasses}`}>
            <div class="p-6">
              <h2 class="text-lg sm:text-xl md:text-2xl font-semibold text-white uppercase tracking-wide mb-1">
                {entry.data.title}{' '}
                <time datetime={entry.data.publishedAt.toISOString()}>
                  {entry.data.publishedAt.toDateString()}
                </time>
              </h2>
              <div class="mt-4">
                <a
                  href={`/posts/${entry.slug}`}
                  class="text-white text-sm hover:text-gray-300 font-semibold">
                  Read More â†’
                </a>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
  <div class="flex justify-center items-center mt-8">
    <div class="flex">
      <span class="text-red font-medium text-lg sm:text-xl md:text-2xl mr-4">
        Page {page.currentPage} of {page.lastPage}
      </span>
      <!-- Previous Link -->
      {
        page.url.prev ? (
          <a
            href={page.url.prev}
            class="text-blue font-medium mr-4 text-lg sm:text-xl md:text-2xl">
            Previous
          </a>
        ) : null
      }
      <!-- Next Link -->
      {
        page.url.next ? (
          <a
            href={page.url.next}
            class="text-blue font-medium text-lg sm:text-xl md:text-2xl">
            Next
          </a>
        ) : null
      }
    </div>
  </div>
</Layout>
